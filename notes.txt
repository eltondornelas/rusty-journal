https://docs.microsoft.com/en-us/learn/modules/rust-create-command-line-program/
// to make easy to handle command-line arguments, we can use a third-party crate called: structopt
// the commando below check whether it's available and determine the most recent version
$ cargo search structopt

$ cargo run -- add "buy milk"
$ cargo run -- done 4
$ cargo run -- -j groceries.txt list

//  chrono is a good crate to use if you need to handle date and time data in Rust. It provides an easy API for representing a moment in time.
$ cargo search chrono

/* When we need to persist structs and enum instances, we need to think about serialization.
 * When we need to get that data back into a program, weâ€™re talking about deserialization.
 * Serialization and deserialization are the processes of storing data in a stream of bytes and then retrieving
 * it for later use, without any loss of information. You can then send those bytes over a connection or store them
 * in a file in a storage device.
 **********************************************************************************************************************/

 $ cargo search serde
 $ cargo search serde_json

// firts tests
/* OBS: We started by calling cargo run -- to ensure that all the arguments passed after -- will be sent to our program
 * and not to cargo itself. */
$ cargo run -- -j test-journal.json add "buy milk"
$ cargo run -- -j test-journal.json add "take the dog for a walk"
$ cargo run -- -j test-journal.json add "water the plants"
$ cargo run -- -j test-journal.json list
    1: buy milk                                           [2021-01-08 16:39]
    2: take the dog for a walk                            [2021-01-08 16:39]
    3: water the plants                                   [2021-01-08 16:39]

$ cargo run -- -j test-journal.json done 2
$ cargo run -- -j test-journal.json list
    1: buy milk                                           [2021-01-08 16:39]
    2: water the plants                                   [2021-01-08 16:39]


// To compile the program, go to the terminal and run the command:
$ cargo run --release.

// The compiled binary (the executable file) will be in the target/release/ directory and will be named after the project name. "rusty-journal"
$ ./rusty-journal -j test-journal.json add "finish reading the book"
$ ./rusty-journal -j test-journal.json list